execute store result score #predicate cable.type run data get storage cable:data input.index

execute align xyz as @e[limit=1,type=item_display,dx=0,tag=cable.init,predicate=cable:same_type] run return run function cable:impl/destroy

execute unless block ~ ~ ~ #minecraft:replaceable run return fail
execute if predicate {'condition':'minecraft:location_check','predicate':{'block':{'state':{'waterlogged':'true'}}}} run setblock ~ ~ ~ water destroy
execute unless block ~ ~ ~ water run setblock ~ ~ ~ air destroy
execute align xyz store result score #count cable.math if entity @e[type=item_display,dx=0,tag=cable.core]
execute if score #count cable.math matches 8.. run return fail

scoreboard players set #new cable.network.low 0
scoreboard players set #new cable.network.high 0

execute rotated 90 0 positioned ^ ^ ^1 as @e[limit=1,type=item_display,tag=cable.init,distance=...5,predicate=cable:same_type] run function ./place/update
execute rotated -90 0 positioned ^ ^ ^1 as @e[limit=1,type=item_display,tag=cable.init,distance=...5,predicate=cable:same_type] run function ./place/update
execute rotated 0 -90 positioned ^ ^ ^1 as @e[limit=1,type=item_display,tag=cable.init,distance=...5,predicate=cable:same_type] run function ./place/update
execute rotated 0 90 positioned ^ ^ ^1 as @e[limit=1,type=item_display,tag=cable.init,distance=...5,predicate=cable:same_type] run function ./place/update
execute rotated 0 0 positioned ^ ^ ^1 as @e[limit=1,type=item_display,tag=cable.init,distance=...5,predicate=cable:same_type] run function ./place/update
execute rotated 180 0 positioned ^ ^ ^1 as @e[limit=1,type=item_display,tag=cable.init,distance=...5,predicate=cable:same_type] run function ./place/update
function ./place/update:
	execute if score #new cable.network.low matches 1.. run function ./place/network/regen:
		scoreboard players operation #predicate cable.network.low = @s cable.network.low
		scoreboard players operation #predicate cable.network.high = @s cable.network.high
		execute as @e[type=item_display,tag=cable.network,predicate=cable:same_network] run function ./place/network/set:
			scoreboard players operation @s cable.network.low = #new cable.network.low
			scoreboard players operation @s cable.network.high = #new cable.network.high
	execute if score #new cable.network.low matches 0 run function ./place/network/copy:
		scoreboard players operation #new cable.network.low = @s cable.network.low
		scoreboard players operation #new cable.network.high = @s cable.network.high
	kill @s[tag=cable.core,tag=!cable.cable]

	execute facing ^ ^ ^-1 summon item_display run function ./place/cable
	execute positioned ^ ^ ^-1 facing ^ ^ ^1 summon item_display run function ./place/cable
		
	function ./place/cable:
		rotate @s ~ ~
		tp @s ~ ~ ~ ~ ~

		function ./place/network/set
		data merge entity @s {Tags:['cable.cable',  'cable','cable.init','cable.networt'],item_display:'fixed',item:{id:'coal'}}
		data modify entity @s item.components set from storage cable:data input.components
		data modify entity @s item.components.'minecraft:custom_model_data'.floats set value [1f]
		scoreboard players operation @s cable.type = #predicate cable.type
		scoreboard players set @s cable.direction -1

		execute unless entity @e[type=item_display,tag=cable.core,distance=...5,predicate=cable:same_type] run tag @s add cable.core
		data modify entity @s[tag=!cable.core] item.components.'minecraft:custom_model_data'.flags set value [1b]

		scoreboard players set @s[y_rotation=-135..-45] cable.direction 1
		scoreboard players set @s[y_rotation=45..135] cable.direction 2
		scoreboard players set @s[x_rotation=-90..-45] cable.direction 3
		scoreboard players set @s[x_rotation=45..90] cable.direction 4
		scoreboard players set @s[y_rotation=-45..45] cable.direction 5
		scoreboard players set @s[y_rotation=135..225] cable.direction 6

		scoreboard players operation #predicate cable.direction = @s cable.direction
		execute align xyz as @e[type=item_display,dx=0,tag=cable.cable,predicate=cable:same_direction] run function ./update/enumerate
		data remove storage cable:data temp[{i:-1}]
		execute align xyz as @e[type=item_display,dx=0,tag=cable.cable,predicate=cable:same_direction] run function ./update/offset


execute if score #new cable.network.low matches 0 summon item_display run function ./place/core:
	data merge entity @s {Tags:['cable.core',  'cable','cable.init','cable.networt'],item_display:'fixed',item:{id:'coal'}}
	data modify entity @s item.components set from storage cable:data input.components
	scoreboard players operation @s cable.type = #predicate cable.type
	scoreboard players set @s cable.direction -1

	scoreboard players add #global_network cable.network.low 1
	execute if score #global_network cable.network.low matches 2147483647 run scoreboard players add #global_network cable.network.high 1
	execute if score #global_network cable.network.low matches 2147483647 run scoreboard players set #global_network cable.network.low 1
	scoreboard players operation @s cable.network.low = #global_network cable.network.low
	scoreboard players operation @s cable.network.high = #global_network cable.network.high

	execute align xyz as @e[type=item_display,dx=0,tag=cable.core] run function ./update/enumerate
	data remove storage cable:data temp[{i:-1}]
	execute align xyz as @e[type=item_display,dx=0,tag=cable.core,tag=!cable.cable] run function ./update/offset
	#
		# execute align xyz as @e[type=item_display,dx=0,tag=cable.core] run function ./place/offset/enumerate with entity @s item.components."minecraft:custom_data":
		#	 $execute store result storage cable:data temp[$(type)].i int 1 run scoreboard players get @s cable.type 
		# data remove storage cable:data temp[{i:-1}]
		# execute store result score #count cable.type run data get storage cable:data temp
		# execute if score #count cable.type matches 2 align xyz as @e[type=item_display,dx=0,tag=cable.core,tag=!cable.cable] positioned ~.5 ~.5 ~.5 run function ./place/offset/2:
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[0].i
		#	 execute if predicate cable:same_type run tp @s ~ ~.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[1].i
		#	 execute if predicate cable:same_type run tp @s ~ ~-.2 ~

		# execute if score #count cable.type matches 3 align xyz as @e[type=item_display,dx=0,tag=cable.core,tag=!cable.cable] positioned ~.5 ~.5 ~.5 run function ./place/offset/3:
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[0].i
		#	 execute if predicate cable:same_type run tp @s ~.2 ~.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[1].i
		#	 execute if predicate cable:same_type run tp @s ~ ~ ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[2].i
		#	 execute if predicate cable:same_type run tp @s ~-.2 ~-.2 ~

		# execute if score #count cable.type matches 4.. align xyz as @e[type=item_display,dx=0,tag=cable.core,tag=!cable.cable] positioned ~.5 ~.5 ~.5 run function ./place/offset/4:
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[0].i
		#	 execute if predicate cable:same_type run tp @s ~ ~.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[1].i
		#	 execute if predicate cable:same_type run tp @s ~.2 ~ ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[2].i
		#	 execute if predicate cable:same_type run tp @s ~ ~-.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[3].i
		#	 execute if predicate cable:same_type run tp @s ~-.2 ~ ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[4].i
		#	 execute if data storage cable:data temp[4] if predicate cable:same_type run tp @s ~.2 ~.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[5].i
		#	 execute if data storage cable:data temp[5] if predicate cable:same_type run tp @s ~.2 ~-.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[6].i
		#	 execute if data storage cable:data temp[6] if predicate cable:same_type run tp @s ~-.2 ~-.2 ~
		#	 execute store result score #predicate cable.type run data get storage cable:data temp[7].i
		#	 execute if data storage cable:data temp[7] if predicate cable:same_type run tp @s ~-.2 ~.2 ~

return 1
